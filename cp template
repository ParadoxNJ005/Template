#include <bits/stdc++.h>
using namespace std;

#define int long long int
#define double long double
#define MAX LLONG_MAX
#define MIN LLONG_MIN
#define endl '\n'
#define vin(a) for(int i=0;i<(a).size();i++)cin>>a[i];
#define vout(a) for(int i=0;i<a.size();i++)cout<<a[i]<<' ';cout<<endl;
#define cout(x) cout<<setprecision(20)<<x<<endl;
#define yes {cout<<"YES"<<endl; return;}
#define no {cout<<"NO"<<endl; return;}
const int M = 1e9+7;
const int N = 1e5+10;
vector<bool> prime(N,true);

int lcm(int a,int b){return (a*b)/__gcd(a,b);}

int ceil(int n,int k){return (n+k-1)/k;}

int power(int a,int b){
    if(b==0) return 1;
    int ans = power(a,b/2);
    ans = (ans*ans)%M;
    if(b&1) ans = (a*ans)%M;
    return ans;
}

void precalc(){}

class disjointset{
    public:
    vector<int>rank,parent,size;
   
    disjointset(int n){
        rank.resize(n+1,0);
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0 ; i<=n ; i++){
            parent[i] = i;
            size[i] =1 ;
        }
    }

    int findUPar(int node){
        if(node == parent[node]){
            return node;
        }

       return parent[node] = findUPar(parent[node]); 
    }

    void UnionByRank(int u , int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if(ulp_u == ulp_v) return;
        if(rank[ulp_u] < rank[ulp_v]){
            parent[ulp_u] = ulp_v;
        }else if(rank[ulp_u] > rank[ulp_v]){
            parent[ulp_v] = ulp_u;
        }else{
            parent[ulp_u] = ulp_v;
            rank[ulp_v]++;
        }
    }

    void unionBySize(int u , int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);

        if(ulp_u == ulp_v){
            return;
        }
        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }else{
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};

void solve() {
    // Implement your solution here
}

static void run_with_stack_size(void (*func)(void), size_t stsize) {
    char *stack, *send;
    stack = (char *)malloc(stsize);
    send = stack + stsize - 16;
    send = (char *)((uintptr_t)send / 16 * 16);
    asm volatile(
        "mov %%rsp, (%0)\n"
        "mov %0, %%rsp\n"
        :
        : "r"(send));
    func();
    asm volatile("mov (%0), %%rsp\n" : : "r"(send));
    free(stack);
}

void main_() {
    ios_base::sync_with_stdio(false); 
    cin.tie(0); 
    cout.tie(0);
    precalc();
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
}

int32_t main() {
    run_with_stack_size(main_, 1024 * 1024 * 1024); // run with a 1 GiB stack
    return 0;
}
